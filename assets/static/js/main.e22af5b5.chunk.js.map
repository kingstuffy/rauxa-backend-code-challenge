{"version":3,"sources":["scenes/Dashboard/index.js","services/contacts/constants.js","services/contacts/actions.js","scenes/Dashboard/components/EmptyState/index.js","scenes/Dashboard/components/Loader/index.js","scenes/Dashboard/components/SectionHeader/index.js","scenes/Dashboard/scenes/Contacts/scenes/ContactsHome/components/ContactList/index.js","scenes/Dashboard/scenes/Contacts/scenes/ContactsHome/index.js","scenes/Dashboard/scenes/Contacts/scenes/CreateContact/components/ContactForm/index.js","scenes/Dashboard/scenes/Contacts/scenes/CreateContact/index.js","scenes/Dashboard/scenes/Contacts/index.js","scenes/Dashboard/routes.js","components/NotFound/index.js","App.js","routes.js","services/contacts/reducers.js","rootReducer.js","services/api/config.js","services/contacts/sagas.js","rootSaga.js","configureStore.js","index.js"],"names":["Dashboard","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","children","Component","defaultProps","FETCH_CONTACTS_REQUEST","CREATE_CONTACT_REQUEST","VIEW_CONTACT_REQUEST","fetchContactsSuccess","contacts","meta","type","fetchContactsFailure","message","createContactSuccess","contact","createContactFailure","messages","viewContactSuccess","viewContactFailure","EmptyState","image","text","buttonText","action","src","alt","onClick","Loader","SectionHeader","ContactList","data","Table","responsive","map","item","index","key","id","imgUrl","name","phone","Date","createdAt","toDateString","toTimeString","ContactsHome","_this","loadData","bind","assertThisInitialized","createContact","onPageChange","renderContent","nextProps","location","search","page","history","push","concat","e","preventDefault","_ref","params","queryString","parse","fetchContactsRequest","fetchStatus","fetching","components_Loader","contactList","length","components_EmptyState","components_ContactList","components_SectionHeader","Button","color","pageCount","match","url","connect","state","app","arguments","undefined","types","adaptFileEventToValue","delegate","target","files","FileInput","_ref$input","input","onChange","value","onBlur","objectWithoutProperties","assign","ContactForm","handleSubmit","createStatus","Form","onSubmit","error","Alert","FormGroup","Label","for","Field","component","accept","reduxForm","form","CreateContact","back","submit","ok","contactPayload","createContactRequest","components_ContactForm","errors","reset","Contacts","scenes_Dashboard","Switch","Route","exact","path","DashboardRouter","NotFound","App","routes","src_App","initialState","contactsReducer","combineReducers","fetchStatusProp","createStatusProp","objectSpread","appReducer","api_config","createUrl","process","listUrl","fetchContacts","viewContact","fetchContactsSaga","createContactSaga","viewContactSaga","sampleData","config","response","regenerator_default","wrap","_context","prev","next","baseURL","apiConfig","method","axios","request","sent","put","actions","t0","has","stop","_marked","base64String","_context2","abrupt","getBase64","split","_marked2","_context3","_marked3","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","_context4","takeLatest","_marked4","_context5","_marked5","_context6","_marked6","rootSaga","all","contactsSaga","rootSaga_marked","middlewares","sagaMiddleware","createSagaMiddleware","store","rootReducer","formReducer","createStore","applyMiddleware","apply","run","configureStore","ReactDOM","render","es","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.e22af5b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Dashboard.css';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"dashboard\">\n        <main className=\"main-content\">\n          <div className=\"content-area\">\n            {this.props.children}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nDashboard.defaultProps = {\n  children: '',\n};\n\nDashboard.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Dashboard;\n","export const FETCH_CONTACTS_REQUEST = 'FETCH_CONTACTS_REQUEST';\nexport const FETCH_CONTACTS_SUCCESS = 'FETCH_CONTACTS_SUCCESS';\nexport const FETCH_CONTACTS_FAILURE = 'FETCH_CONTACTS_FAILURE';\nexport const CREATE_CONTACT_REQUEST = 'CREATE_CONTACT_REQUEST';\nexport const CREATE_CONTACT_SUCCESS = 'CREATE_CONTACT_SUCCESS';\nexport const CREATE_CONTACT_FAILURE = 'CREATE_CONTACT_FAILURE';\nexport const VIEW_CONTACT_REQUEST = 'VIEW_CONTACT_REQUEST';\nexport const VIEW_CONTACT_SUCCESS = 'VIEW_CONTACT_SUCCESS';\nexport const VIEW_CONTACT_FAILURE = 'VIEW_CONTACT_FAILURE';\n","import * as types from './constants';\n\nexport const fetchContactsRequest = (page = 1) => ({\n  type: types.FETCH_CONTACTS_REQUEST,\n  page,\n});\n\nexport const fetchContactsSuccess = (contacts, meta) => ({\n  type: types.FETCH_CONTACTS_SUCCESS,\n  contacts,\n  meta,\n});\n\nexport const fetchContactsFailure = message => ({\n  type: types.FETCH_CONTACTS_FAILURE,\n  message,\n});\n\n\nexport const createContactRequest = contact => ({\n  type: types.CREATE_CONTACT_REQUEST,\n  contact,\n});\n\nexport const createContactSuccess = (message, contact) => ({\n  type: types.CREATE_CONTACT_SUCCESS,\n  message,\n  contact,\n});\n\nexport const createContactFailure = (message, messages) => ({\n  type: types.CREATE_CONTACT_FAILURE,\n  message,\n  messages,\n});\n\nexport const viewContactRequest = contactId => ({\n  type: types.VIEW_CONTACT_REQUEST,\n  contactId,\n});\n\nexport const viewContactSuccess = contact => ({\n  type: types.VIEW_CONTACT_SUCCESS,\n  contact,\n});\n\nexport const viewContactFailure = message => ({\n  type: types.VIEW_CONTACT_FAILURE,\n  message,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './EmptyState.css';\n\nconst EmptyState = (props) => {\n  const {\n    image, text, buttonText, action,\n  } = props;\n\n  return (\n    <div className=\"empty-state\">\n      <img src={image} alt=\"\" />\n      <h2>{text}</h2>\n      {buttonText ?\n        <button\n          type=\"button\"\n          onClick={action}\n        >\n          {props.buttonText}\n        </button> : null}\n    </div>\n  );\n};\n\nEmptyState.defaultProps = {\n  image: '',\n  text: '',\n  buttonText: '',\n  action: () => {},\n};\n\nEmptyState.propTypes = {\n  image: PropTypes.string,\n  text: PropTypes.string,\n  buttonText: PropTypes.string,\n  action: PropTypes.func,\n};\n\nexport default EmptyState;\n","import React from 'react';\nimport './Loader.css';\n\nconst Loader = () =>\n  (\n    <div className=\"loader-container\">\n      <div className=\"loader\" />\n    </div>\n  );\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './SectionHeader.css';\n\nconst SectionHeader = props => (\n  <header className=\"header\">\n    {props.children}\n  </header>\n);\n\nSectionHeader.defaultProps = {\n  children: '',\n};\n\nSectionHeader.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default SectionHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'reactstrap';\n\nimport './ContactList.css';\n\n\nconst ContactList = (props) => {\n  const { data } = props;\n  return (\n    <div className=\"contact-list\">\n      <Table responsive>\n        <thead>\n        <tr>\n          <th className=\"contact-list__th\">SN</th>\n          <th className=\"contact-list__th contact-list__th--avatar\">Avatar</th>\n          <th className=\"contact-list__th\">Name</th>\n          <th className=\"contact-list__th\">Phone number</th>\n          <th className=\"contact-list__th\">Created</th>\n        </tr>\n        </thead>\n        <tbody>\n        {\n          data.map((item, index) =>\n            (\n              <tr key={index}>\n                <td className=\"contact-list__td\">{item.id}</td>\n                <td className=\"contact-list__td\">\n                  <img className=\"contact-list__img\" src={item.imgUrl}/>\n                </td>\n                <td className=\"contact-list__td\">{item.name}</td>\n                <td className=\"contact-list__td\">{item.phone}</td>\n                <td className=\"contact-list__td\">\n                  {new Date(item.createdAt).toDateString()},\n                  {' '}\n                  {new Date(item.createdAt).toTimeString()}\n                </td>\n              </tr>\n            ))\n        }\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nContactList.defaultProps = {\n  data: [],\n};\n\nContactList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport queryString from 'query-string';\nimport { Button } from 'reactstrap';\n\nimport { fetchContactsRequest } from '../../../../../../services/contacts/actions';\nimport EmptyState from '../../../../components/EmptyState';\nimport Loader from '../../../../components/Loader';\nimport SectionHeader from '../../../../components/SectionHeader';\nimport ContactList from './components/ContactList';\nimport './ContactsHome.css';\n\nclass ContactsHome extends Component {\n  constructor(props) {\n    super(props);\n    this.loadData = this.loadData.bind(this);\n    this.createContact = this.createContact.bind(this);\n    this.onPageChange = this.onPageChange.bind(this);\n    this.renderContent = this.renderContent.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadData(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.location.search !== this.props.location.search) {\n      this.loadData(nextProps);\n    }\n  }\n\n  onPageChange(page) {\n    this.props.history.push(`?page=${page}`);\n  }\n\n  createContact(e) {\n    e.preventDefault();\n    this.props.history.push('add');\n  }\n\n  loadData({ location }) {\n    const params = queryString.parse(location.search);\n    this.props.fetchContactsRequest(params.page || 1);\n  }\n\n  renderContent() {\n    if (this.props.fetchStatus.fetching) {\n      return <Loader/>;\n    }\n\n    if (this.props.contactList.length === 0) {\n      return (\n        <EmptyState\n          text=\"No contact has been created\"\n          buttonText=\"Create Contact\"\n          action={this.createContact}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <ContactList data={this.props.contactList}/>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <SectionHeader>\n          <div className=\"row\">\n            <div className=\"col-sm-8\">\n              <h2 className=\"page-title\">Contacts</h2>\n            </div>\n            <div className=\"col-sm-4\">\n              <Button color=\"primary\" className=\"pull-right\" onClick={this.createContact}>Add</Button>\n            </div>\n          </div>\n        </SectionHeader>\n        <div className=\"contacts__home\">\n          {this.renderContent()}\n        </div>\n      </div>\n\n    );\n  }\n}\n\nContactsHome.defaultProps = {\n  fetchStatus: {\n    fetching: false,\n  },\n  contactList: [],\n  meta: {\n    pageCount: 1,\n  },\n  location: {\n    search: '',\n  },\n  fetchContactsRequest: () => {\n  },\n  history: {\n    push: () => {\n    },\n  },\n  match: {\n    url: '',\n  },\n};\n\nContactsHome.propTypes = {\n  fetchStatus: PropTypes.shape({\n    fetching: PropTypes.bool,\n  }),\n  contactList: PropTypes.arrayOf(PropTypes.shape({})),\n  meta: PropTypes.shape({\n    pageCount: PropTypes.number,\n  }),\n  location: PropTypes.shape({\n    search: PropTypes.string,\n  }),\n  fetchContactsRequest: PropTypes.func,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  match: PropTypes.shape({\n    url: PropTypes.string,\n  }),\n};\n\nconst mapStateToProps = state => ({\n  fetchStatus: state.app.contacts.contacts.fetchStatus,\n  contactList: state.app.contacts.contacts.contactList,\n  meta: state.app.contacts.contacts.meta,\n});\n\nexport default connect(mapStateToProps, { fetchContactsRequest })(ContactsHome);\n","import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Button, Form, FormGroup, Label, Alert } from 'reactstrap';\nimport './ContactForm.css';\n\n\nconst adaptFileEventToValue = delegate => e => delegate(e.target.files[0]);\nconst FileInput = ({\n                     input: { value: omitValue, onChange, onBlur, ...inputProps },\n                     meta: omitMeta,\n                     ...props\n                   }) => {\n  return (\n    <input\n      onChange={adaptFileEventToValue(onChange)}\n      onBlur={adaptFileEventToValue(onBlur)}\n      type=\"file\"\n      {...props.input}\n      {...props}\n    />\n  );\n};\n\n\nlet ContactForm = props => {\n  const { handleSubmit, createStatus, message } = props;\n\n  return (\n    <Form onSubmit={handleSubmit} className=\"contact-form\">\n      {\n        createStatus.error ?\n          (<Alert color=\"danger\">\n            {message}\n          </Alert>) : ''\n      }\n      <FormGroup>\n        <Label for=\"name\">Name</Label>\n        <Field name=\"name\" component=\"input\" type=\"text\" className=\"form-control\"/>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"phone\">Phone</Label>\n        <Field name=\"phone\" component=\"input\" type=\"tel\" className=\"form-control\"/>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"image\">Avatar</Label>\n        <Field name=\"image\" className=\"form-control-file\" accept='.jpg, .png, .jpeg' component={FileInput} type=\"file\"/>\n      </FormGroup>\n      <Button color=\"primary\">Add</Button>\n    </Form>\n  )\n};\n\nContactForm = reduxForm({\n  form: 'contactForm'\n})(ContactForm);\n\nexport default ContactForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { reset } from 'redux-form';\nimport { createContactRequest } from '../../../../../../services/contacts/actions';\nimport Loader from '../../../../components/Loader';\nimport SectionHeader from '../../../../components/SectionHeader';\nimport ContactForm from './components/ContactForm/index';\nimport './CreateContact.css';\n\nclass CreateContact extends Component {\n  constructor(props) {\n    super(props);\n    this.back = this.back.bind(this);\n    this.submit = this.submit.bind(this);\n  }\n\n  componentWillMount() {\n    if (this.props.createStatus.ok) {\n      this.props.history.push('');\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.createStatus.ok) {\n      nextProps.history.push('');\n    }\n  }\n\n  submit(contactPayload) {\n    this.props.createContactRequest(contactPayload);\n  }\n\n  back(e) {\n    e.preventDefault();\n    this.props.history.push('');\n  }\n\n  render() {\n    const {\n      createStatus,\n    } = this.props;\n\n    return (\n      <div>\n        <SectionHeader>\n          <div className=\"row\">\n            <div className=\"col-sm-8\">\n              <h2 className=\"page-title\">New Contact</h2>\n            </div>\n            <div className=\"col-sm-4\">\n              <button className=\"back-btn pull-right\" onClick={this.back}>\n                <i className=\"fa fa-long-arrow-left \"/>\n              </button>\n            </div>\n          </div>\n        </SectionHeader>\n        <div className=\"contacts__create\">\n          {\n            createStatus.fetching ? (<Loader/>) :\n              (\n                <ContactForm onSubmit={this.submit} {...this.props}/>\n              )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    createStatus: state.app.contacts.contacts.createStatus,\n    errors: state.app.contacts.contacts.messages,\n    message: state.app.contacts.contacts.message,\n  };\n};\n\nCreateContact.defaultProps = {\n  createStatus: {},\n  createContactRequest: () => {\n  },\n  errors: {},\n  history: {\n    push: () => {\n    },\n  },\n  reset: () => {\n  },\n};\n\nCreateContact.propTypes = {\n  createStatus: PropTypes.shape({}),\n  message: PropTypes.string,\n  createContactRequest: PropTypes.func,\n  errors: PropTypes.shape({}),\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  reset: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, {\n  createContactRequest,\n  reset,\n})(CreateContact);\n\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Dashboard from '../../index';\nimport PropTypes from 'prop-types';\nimport ContactsHome from './scenes/ContactsHome';\nimport CreateContact from './scenes/CreateContact';\n\nconst Contacts = props => (\n  <Dashboard>\n    <Switch>\n      <Route\n        exact\n        path={`${props.match.url}`}\n        component={ContactsHome}\n      />\n      <Route\n        path={'/add'}\n        component={CreateContact}\n      />\n    </Switch>\n  </Dashboard>\n);\n\n\nContacts.defaultProps = {\n  match: {\n    url: '',\n  },\n};\n\nContacts.propTypes = {\n  match: PropTypes.shape({\n    url: PropTypes.string,\n  }),\n};\n\nexport default Contacts;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Contacts from './scenes/Contacts';\n\nconst DashboardRouter = [\n  <Route key=\"contacts\" path=\"/\" component={Contacts}/>,\n];\n\nexport default DashboardRouter;\n","import React from 'react';\nimport './NotFound.css';\n\nconst NotFound = () => (\n  <div className=\"not-found\">\n    <div className=\"centered-content\">\n      <h1>404</h1>\n      <p>Page Not Found</p>\n    </div>\n\n  </div>\n);\n\nexport default NotFound;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './assets/styles/normalize.css';\nimport font from 'font-awesome/css/font-awesome.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst App = props => (\n  <div>\n    {props.children}\n  </div>\n);\n\nApp.defaultProps = {\n  children: '',\n};\n\nApp.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default App;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport DashboardRouter from './scenes/Dashboard/routes';\nimport NotFound from './components/NotFound';\nimport App from './App';\n\nconst routes = (\n  <App>\n    <Switch>\n      {DashboardRouter}\n      <Route key=\"404\" path=\"/404\" component={NotFound}/>\n    </Switch>\n  </App>\n);\n\nexport default routes;\n","import { combineReducers } from 'redux';\nimport * as types from './constants';\n\nconst initialState = {\n  fetchStatus: {\n    fetching: false,\n    ok: false,\n    error: false,\n  },\n  createStatus: {\n    fetching: false,\n    ok: false,\n    error: false,\n  },\n  contactList: [],\n  contact: {},\n  message: '',\n  messages: {},\n  meta: {},\n};\n\nconst contacts = (state = initialState, action) => {\n  let fetchStatusProp;\n  let createStatusProp;\n\n  switch (action.type) {\n    case types.FETCH_CONTACTS_REQUEST:\n      fetchStatusProp = { fetching: true, ok: false, error: false };\n      return {\n        ...state,\n        fetchStatus: fetchStatusProp,\n      };\n\n    case types.FETCH_CONTACTS_SUCCESS:\n      fetchStatusProp = { fetching: false, ok: true, error: false };\n      return {\n        ...state,\n        fetchStatus: fetchStatusProp,\n        contactList: action.contacts,\n        meta: action.meta,\n      };\n\n    case types.FETCH_CONTACTS_FAILURE:\n      fetchStatusProp = { fetching: false, ok: false, error: true };\n      return {\n        ...state,\n        fetchStatus: fetchStatusProp,\n        message: action.message,\n      };\n\n\n    case types.VIEW_CONTACT_REQUEST:\n      fetchStatusProp = { fetching: true, ok: false, error: false };\n      return {\n        ...state,\n        fetchStatus: fetchStatusProp,\n      };\n\n    case types.VIEW_CONTACT_SUCCESS:\n      fetchStatusProp = { fetching: false, ok: true, error: false };\n      return {\n        ...state,\n        fetchStatus: fetchStatusProp,\n        contact: action.contact,\n      };\n\n    case types.VIEW_CONTACT_FAILURE:\n      fetchStatusProp = { fetching: false, ok: false, error: true };\n      return {\n        ...state,\n        fetchStatus: fetchStatusProp,\n        message: action.message,\n      };\n\n\n    case types.CREATE_CONTACT_REQUEST:\n      createStatusProp = { fetching: true, ok: false, error: false };\n      return {\n        ...state,\n        createStatus: createStatusProp,\n      };\n\n    case types.CREATE_CONTACT_SUCCESS:\n      createStatusProp = { fetching: false, ok: true, error: false };\n      return {\n        ...state,\n        createStatus: createStatusProp,\n        message: action.message,\n        contact: action.contact,\n      };\n\n    case types.CREATE_CONTACT_FAILURE:\n      createStatusProp = { fetching: false, ok: false, error: true };\n      return {\n        ...state,\n        createStatus: createStatusProp,\n        message: action.message,\n        messages: action.messages,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst contactsReducer = combineReducers({\n  contacts,\n});\n\nexport default contactsReducer;\n\n","import { combineReducers } from 'redux';\nimport contactsReducer from './services/contacts/reducers';\n\nconst appReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nexport default appReducer;\n","export default {\n  createUrl: process.env.REACT_APP_API_CREATE_URL,\n  listUrl: process.env.REACT_APP_API_LIST_URL,\n};\n\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport has from 'lodash/has';\nimport { reset } from 'redux-form';\nimport axios from \"axios/index\";\nimport * as actions from './actions';\nimport * as types from './constants';\nimport apiConfig from \"../api/config\";\n\nconst sampleData = {\n  name: 'John Doe',\n  phone: '+1 4492 394 33',\n  imgUrl: 'http://placehold.it/128x128'\n};\n\nfunction* fetchContacts(action) {\n  try {\n    const config = {\n      baseURL: apiConfig.listUrl,\n      method: 'get',\n      url: '/contact',\n      params: {\n        page: action.page,\n      },\n    };\n    const response = yield call(axios.request, config);\n    yield put(actions.fetchContactsSuccess(response.data.data, response.data.meta));\n  } catch (error) {\n    if (has(error, 'response.data.message')) {\n      yield put(actions.fetchContactsFailure(error.response.data.message));\n    } else {\n      yield put(actions.fetchContactsFailure(error.message));\n    }\n  }\n}\n\nfunction* createContact(action) {\n  try {\n    if (!action.contact.name) {\n      yield put(actions.createContactFailure('Please provide a name'));\n      return;\n    }\n    if (!action.contact.phone) {\n      yield put(actions.createContactFailure('Please provide a phone number'));\n      return;\n    }\n    if (!action.contact.image) {\n      yield put(actions.createContactFailure('Please upload an image'));\n      return;\n    }\n\n    const base64String = yield call(getBase64, action.contact.image);\n    const data = {\n      ...action.contact,\n      image: base64String.split(',')[1]\n    };\n\n    const config = {\n      baseURL: apiConfig.createUrl,\n      method: 'post',\n      url: '/contact',\n      data,\n    };\n    const response = yield call(axios.request, config);\n\n    yield put(reset('contactForm'));\n    yield put(actions.createContactSuccess(response.data.data));\n  } catch (error) {\n    if (has(error, 'response.data.message')) {\n      yield put(actions.createContactFailure(error.response.data.message, error.response.data.errors));\n    } else {\n      yield put(actions.createContactFailure(error.response));\n    }\n  }\n}\n\nfunction* viewContact(action) {\n  try {\n    yield put(actions.viewContactSuccess(sampleData));\n  } catch (error) {\n    if (has(error, 'response.data.message')) {\n      yield put(actions.viewContactFailure(error.response.data.message));\n    } else {\n      yield put(actions.viewContactFailure(error.response));\n    }\n  }\n}\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nexport function* fetchContactsSaga() {\n  yield takeLatest(types.FETCH_CONTACTS_REQUEST, fetchContacts);\n}\n\nexport function* createContactSaga() {\n  yield takeLatest(types.CREATE_CONTACT_REQUEST, createContact);\n}\n\nexport function* viewContactSaga() {\n  yield takeLatest(types.VIEW_CONTACT_REQUEST, viewContact);\n}\n","import { all } from 'redux-saga/effects';\nimport * as contactsSaga from './services/contacts/sagas';\n\nexport default function* rootSaga() {\n  yield all([\n    contactsSaga.fetchContactsSaga(),\n    contactsSaga.createContactSaga(),\n    contactsSaga.viewContactSaga(),\n  ]);\n}\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport createSagaMiddleware from 'redux-saga';\nimport startsWith from 'lodash/startsWith';\nimport { createLogger } from 'redux-logger';\nimport appReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst middlewares = [];\n\nconst sagaMiddleware = createSagaMiddleware();\nmiddlewares.push(sagaMiddleware);\n\nif (process.env.NODE_ENV === 'development') {\n  const logger = createLogger({\n    collapsed: true,\n    predicate: (getState, action) => !startsWith(action.type, '@@redux-form'),\n  });\n  middlewares.push(logger);\n}\n\nconst configureStore = () => {\n  const rootReducer = combineReducers({\n    app: appReducer,\n    form: formReducer,\n  });\n\n  const store = createStore(\n    rootReducer,\n    applyMiddleware(...middlewares),\n  );\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport routes from './routes';\nimport configureStore from './configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      {routes}\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}